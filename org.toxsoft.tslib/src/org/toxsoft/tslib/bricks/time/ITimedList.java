package org.toxsoft.tslib.bricks.time;

import org.toxsoft.tslib.coll.IList;
import org.toxsoft.tslib.utils.errors.TsNullArgumentRtException;

/**
 * Упорядоченный список сущностей с метками времени.
 *
 * @author goga
 * @param <T> - конкретный тип сущности с меткой времени
 */
public interface ITimedList<T extends ITimestampable>
    extends IList<T> {

  /**
   * Возвращает инетрвал времени, охватываемый элементами списка.
   * <p>
   * Возвращает инетрвал времени от метки времени первого до последнего элемента (включительно). Для пустого списка
   * возвращает {@link ITimeInterval#NULL}, для списка из одного элемента интервал с {@link ITimeInterval#startTime()} =
   * {@link ITimeInterval#endTime()}.
   *
   * @return {@link ITimeInterval} - интервал времени или {@link ITimeInterval#NULL} для пустого списка
   */
  ITimeInterval getInterval();

  /**
   * Выбирает подмножество элементов, находящихся в указанном интервале времени.
   * <p>
   * В результрующий список попадают элементы, мактка времени которых удовлетворяет условиям:<br>
   * <code>{@link ITimeInterval#startTime()} <= {@link ITimestampable#timestamp()} <= {@link ITimeInterval#endTime()}</code>
   * .
   * <p>
   * Метод всегда возвращает новый экземпляр сортированного редактируемого списка элементов.
   *
   * @param aTimeInterval {@link ITimeInterval} - запрошенный интервал времени
   * @return ITimedListEdit&lt;T&gt; - упорядоченная по возрастанию времни выборка элементов
   * @throws TsNullArgumentRtException аргумент = null
   */
  ITimedListEdit<T> selectInterval( ITimeInterval aTimeInterval );

  /**
   * Выбирает подмножество элементов, находящихся в указанном интервале времени.
   * <p>
   * В отличие от {@link #selectInterval(ITimeInterval)}, результрующий список может включать элементы вне интервала. В
   * частности, если есть элементы с меткой времени, равной {@link ITimeInterval#startTime()}, то все они попадают в
   * начало результрующего списка. Если такх элементов нет, то в список попадает последний элемент, с меткой времени,
   * меньшей {@link ITimeInterval#startTime()}. Аналогично, в конец результрующего списка попадают все элементы со
   * временем {@link ITimeInterval#endTime()}, или первый элемент со временем, больше чем
   * {@link ITimeInterval#endTime()}.
   * <p>
   * Метод всегда возвращает новый экземпляр сортированного редактируемого списка элементов.
   *
   * @param aTimeInterval {@link ITimeInterval} - запрошенный интервал времени
   * @return ITimedListEdit&lt;T&gt; - упорядоченная по возрастанию времни выборка элементов
   * @throws TsNullArgumentRtException аргумент = null
   */
  ITimedListEdit<T> selectExtendedInterval( ITimeInterval aTimeInterval );

  /**
   * Выбирает подмножество элементов, метка времени которых больше или равно запрошенному времени.
   *
   * @param aTimestamp long - запрошенное время
   * @return ITimedListEdit&lt;T&gt; - упорядоченная по возрастанию времни выборка элементов
   */
  ITimedListEdit<T> selectAfter( long aTimestamp );

  /**
   * Выбирает подмножество элементов, метка времени которых меньше или равно запрошенному времени.
   *
   * @param aTimestamp long - запрошенное время
   * @return ITimedListEdit&lt;T&gt; - упорядоченная по возрастанию времни выборка элементов
   */
  ITimedListEdit<T> selectBefore( long aTimestamp );

  /**
   * Находит индекс первого из элементов, имеющих метку времени, равную аргументу.
   *
   * @param aTimestamp long - запрошенное время
   * @return int - индекс найденного элемента или -1
   */
  int firstIndexOf( long aTimestamp );

  /**
   * Находит индекс последнего из элементов, имеющих метку времени, равную аргументу.
   *
   * @param aTimestamp long - запрошенное время
   * @return int - индекс найденного элемента или -1
   */
  int lastIndexOf( long aTimestamp );

  /**
   * Находит индекс первого элемента с заданным временем или первый перед ним.
   *
   * @param aTimestamp long - запрошенное время
   * @return int - индекс элемента или -1
   *         <ul>
   *         <li>если список пустой, возвращает -1;</li>
   *         <li>если все элементы находятся перед запрошенным временем, возвращает индекс последнего {@link #size()}-1;
   *         </li>
   *         <li>если все элементы находятся после запрошенного времени, возвращает -1;</li>
   *         <li>если есть элемент(ы) с заданным временем, возвращает индекс последнего из таких элементов;</li>
   *         <li>найден элемент слева от запрошенного времени, возвращает его индекс.</li>
   *         </ul>
   */
  int firstIndexOrBefore( long aTimestamp );

  /**
   * Находит индекс первого элемента с заданным временем или первый после него.
   *
   * @param aTimestamp long - запрошенное время
   * @return int - индекс элемента или -1
   *         <ul>
   *         <li>если список пустой, возвращает -1;</li>
   *         <li>если все элементы находятся перед запрошенным временeм, возвращает -1;</li>
   *         <li>если все элементы находятся после запрошенного времени, возвращает 0;</li>
   *         <li>если есть элемент(ы) с заданным временем, возвращает индекс первого из таких элементов;</li>
   *         <li>найден элемент справа от запрошенного времени, возвращает его индекс.</li>
   *         </ul>
   */
  int firstIndexOrAfter( long aTimestamp );

  /**
   * Находит индекс первого элемента с заданным временем или первый после него.
   *
   * @param aTimestamp long - запрошенное время
   * @return int - индекс элемента или -1
   *         <ul>
   *         <li>если список пустой, возвращает -1;</li>
   *         <li>если все элементы находятся перед запрошенным временeм, возвращает -1;</li>
   *         <li>если все элементы находятся после запрошенного времени, возвращает 0;</li>
   *         <li>если есть элемент(ы) с заданным временем, возвращает индекс первого из таких элементов;</li>
   *         <li>найден элемент справа от запрошенного времени, возвращает его индекс.</li>
   *         </ul>
   */
  int lastIndexOrBefore( long aTimestamp );

  /**
   * Находит индекс последнего элемента с заданным временем или первый после него.
   *
   * @param aTimestamp long - запрошенное время
   * @return int - индекс элемента или -1
   *         <ul>
   *         <li>если список пустой, возвращает -1;</li>
   *         <li>если все элементы находятся перед запрошенным временeм, возвращает -1;</li>
   *         <li>если все элементы находятся после запрошенного времени, возвращает 0;</li>
   *         <li>если есть элемент(ы) с заданным временем, возвращает индекс последнего из таких элементов;</li>
   *         <li>найден элемент справа от запрошенного времени, возвращает его индекс.</li>
   *         </ul>
   */
  int lastIndexOrAfter( long aTimestamp );

  /**
   * Возвращаеи индекс первого элемента, метка времени которого больше заданного времени.
   * <p>
   * Внимание, метод может вернуть значение, выходящее за допустимые пределы индексов: -1 когда список пустой, и
   * {@link #size()}, когда время всех элементов меньше или равно запрошенному.
   *
   * @param aTimestamp long - запрошенное время
   * @return int - индекс элемента или {@link #size()} или -1
   */
  int firstIndexAfter( long aTimestamp );

  /**
   * Возвращаеи индекс последнего элемента, метка времени которого меньше заданного времени.
   * <p>
   * Внимание, метод может вернуть значение, выходящее за допустимые пределы индексов: -1 когда список пустой или когда
   * время всех элементов больше или равно запрошенному.
   * <p>
   * Внимание, метод может вернуть значение, выходящее за допустимые пределы индексов: -1 когда список пустой или когда
   * время всех элементов больше или равно запрошенному.
   *
   * @param aTimestamp long - запрошенное время
   * @return int - индекс элемента или -1
   */
  int lastIndexBefore( long aTimestamp );

  // TODO ???

}
