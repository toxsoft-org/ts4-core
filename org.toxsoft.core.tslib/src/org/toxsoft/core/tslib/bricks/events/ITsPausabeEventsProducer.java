package org.toxsoft.core.tslib.bricks.events;

/**
 * An ability to suspend event generation.
 *
 * @author hazard157
 */
public interface ITsPausabeEventsProducer {

  /**
   * Temporarily pauses the event generation.
   * <p>
   * Multiple calls to this method does not changes pause state, however increases internal counter, thus require
   * correponding number of {@link #resumeFiring(boolean)} method calls.
   */
  void pauseFiring();

  /**
   * Continues the event generation suspended by the {@link #pauseFiring ()} method earlier.
   * <p>
   * If the event generation is not suspended, method does not changes pause state, however decreases internal counter.
   * The resume event generation, this method must be called at list the same times as {@link #pauseFiring()} was called
   * subsequenly.
   *
   * @param aFireDelayed boolean - if <code>true</code> the last event will be generated
   */
  void resumeFiring( boolean aFireDelayed );

  /**
   * Returns event generation susped state.
   *
   * @return boolean - <code>true</code> if event generation is paused
   */
  boolean isFiringPaused();

  /**
   * Determines if there is at least one event pending during suspended state.
   * <p>
   * If events generation is not suspended returns <code>false</code>.
   *
   * @return boolean - pending events sign
   */
  boolean isPendingEvents();

  /**
   * Clears pending events, so no events will be generated by {@link #resumeFiring(boolean)}.
   */
  void resetPendingEvents();

}
